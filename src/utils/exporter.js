// Utilities to produce sample frames and convert frames to Arduino C arrays

export function framesToCArray(frames, name) {
  if (!frames || frames.length === 0) return '// no frames';
  const frameCount = frames.length;
  const cols = 64;
  let out = `// Generated by LED Cube Designer\n#define ${name}_FRAME_COUNT ${frameCount}\n\nconst byte ${name}[${frameCount}][${cols}] = {\n`;

  frames.forEach((f, fi) => {
    out += `  // Frame ${fi}\n  {`;
    for (let i = 0; i < cols; i++) {
      const v = f[i] || 0;
      out += '0x' + v.toString(16).toUpperCase().padStart(2, '0');
      if (i < cols - 1) out += ', ';
      if ((i + 1) % 8 === 0 && i < cols - 1) out += '\n   ';
    }
    out += '}';
    if (fi < frameCount - 1) out += ',\n\n';
    else out += '\n';
  });

  out += '};\n';
  return out;
}

// Provide simple frames for J, A, N as examples (very small shapes centered)
export function framesForJAN() {
  // start with blanks
  const blank = new Array(64).fill(0x00);
  const J = blank.slice();
  const A = blank.slice();
  const N = blank.slice();

  // Example patterns (coarse) - set some columns
  // J: vertical on right columns and hook at bottom
  J[8 * 2 + 5] = 0x7e;
  J[8 * 3 + 5] = 0x7e;
  J[8 * 2 + 2] = 0x80;
  J[8 * 2 + 3] = 0x80;
  J[8 * 2 + 4] = 0x80;
  J[8 * 2 + 5] = 0x7e;

  // A: vertical sides and crossbar
  A[8 * 3 + 2] = 0xfe;
  A[8 * 4 + 2] = 0xfe;
  A[8 * 3 + 5] = 0xfe;
  A[8 * 4 + 5] = 0xfe;
  A[8 * 2 + 3] = 0x80;
  A[8 * 2 + 4] = 0x80;
  A[8 * 4 + 3] = 0x10;
  A[8 * 4 + 4] = 0x10;

  // N: left and right, diagonal
  N[8 * 3 + 2] = 0xfe;
  N[8 * 4 + 2] = 0xfe;
  N[8 * 3 + 5] = 0xfe;
  N[8 * 4 + 5] = 0xfe;
  N[8 * 3 + 3] = 0x42;
  N[8 * 4 + 4] = 0x24;

  return [J, A, N];
}

export function generateHFile(name, frames) {
  const arr = framesToCArray(frames, name);
  const guard = `_${name}_H_`.toUpperCase();
  let out =
    `#ifndef ${guard}\n#define ${guard}\n\n#include <Arduino.h>\n\n` +
    arr +
    `\n#endif // ${guard}\n`;
  return out;
}

export function generateSketch(name, frames) {
  const arr = framesToCArray(frames, name);
  // sketch template using funPrintCube and demo of iterating frames
  const sketch = `// Generated Arduino sketch for ${name}\n\n${arr}\n\nvoid setup(){\n  Serial.begin(38400);\n  delay(500);\n  // send open command\n  for(int i=0;i<70;i++) Serial.write(0xAD);\n  delay(200);\n}\n\nvoid loop(){\n  for(int f=0; f<${name}_FRAME_COUNT; f++) {\n    // send frame f\n    Serial.write(0xF2);\n    Serial.write(${name}[f], 64);\n    delay(200);\n  }\n  // keep looping\n}\n\n// Notes: integrate funPrintCube or adapt Serial.write usage to match your cube protocol.\n`;
  return sketch;
}
